import numpy as np
import soundfile as sf
from scipy.fft import fft, fftfreq, ifft

def amplitude_to_db(amplitude):
    """Convert amplitude to decibels."""
    with np.errstate(divide='ignore'):
        return 20 * np.log10(np.abs(amplitude))

def a_weighting_curve(frequencies):
    """Calculate the A-weighting curve."""
    c1 = 12194**2
    c2 = 20.6**2
    c3 = 107.7**2
    c4 = 737.9**2
    c5 = 12194**2

    frequencies = np.maximum(frequencies, 1e-10)
    
    RA = c1 * (frequencies**4) / (
        ((frequencies**2 + c2) * np.sqrt((frequencies**2 + c3) * (frequencies**2 + c4)) * (frequencies**2 + c5))
    )
    
    A = 20 * np.log10(RA) + 2.0
    
    non_zero_frequency = np.max(frequencies[frequencies > 0])
    A[frequencies < 20] = A[np.argmin(np.abs(frequencies - non_zero_frequency))]
    
    return A

def apply_a_weighting(fft_result, frequencies):
    """Apply the A-weighting curve to the FFT result."""
    A_weights = a_weighting_curve(frequencies)
    return fft_result * 10**(A_weights / 20)

def extract_audio_data_with_a_weighting(flac_file_path, output_txt_file_path):
    print(f"Starting to extract audio data from {flac_file_path}...")
    
    data, samplerate = sf.read(flac_file_path)
    
    if len(data.shape) > 1:
        data = data[:, 0]  # [:, 1] 可跟变为右声道
    
    fft_result = fft(data)
    frequencies = fftfreq(len(data), 1 / samplerate)
    
    weighted_fft_result = apply_a_weighting(fft_result, frequencies)
    
    weighted_signal = ifft(weighted_fft_result)
    
    weighted_db_signal = amplitude_to_db(weighted_signal)
    
    timestamps = np.arange(len(weighted_signal)) / samplerate
    
    with open(output_txt_file_path, 'w') as file:
        for time, db in zip(timestamps, weighted_db_signal):
            file.write(f"{time}, {db}\n")
    
    print(f"Data extracted and saved to {output_txt_file_path}")

flac_path = "/home/zyf/桌面/22-No Time for Caution.flac"  
txt_path = "/home/zyf/桌面/output_dBA.txt"  

extract_audio_data_with_a_weighting(flac_path, txt_path)


